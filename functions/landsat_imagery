/*

This is the contemporary imagery module, which is part of the BVC MMM v4.0 library.
It is used to collect recent Landsat 8 imagery for the area of interest.

Last update: 15-03-2022

*/


exports.doc = 'The imagery module is used to collect images for the ROI.' +
    '\n The output is an image collection ready to be sorted into high and low tide groups. ' +
    '\n It includes .' +
    '\n' +
    '\n LSimagery(roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask):' +
    '\n   @param {ee.Geometry} roi: the region of interest, produced by GEM' +
    '\n   @param {numeric} year1: oldest year of interest' +
    '\n   @param {numeric} year2: most recent year of interest' +
    '\n   @param {numeric} cloudCoverLimit: percentage of allowable cloud cover' +
    '\n   @param {numeric} month_1: oldest month of interest (1:12)' +
    '\n   @param {numeric} month_2: most recent month of interest (1:12)' +
    '\n   @param {numeric} month_2: most recent month of interest (1:12)' +
    '\n   @param {character} cloud_mask: how clouds are removed. Valid inputs are none, mild, and aggressive' +
    '\n   @return {ee.Image} An image collection with clouds removed.';

exports.LSimagery = function(roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask){

  // collect the LS4 imagery
  var col4 =  ee.ImageCollection("LANDSAT/LT04/C02/T1_L2")
    // filter to the path/row
    .filterBounds(roi) 
    // filter to the set cloud cover
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit) 
    // filter for selected year range
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    // filter for selected year range
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);
  
  // collect the LS5 imagery
  var col5 =  ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
    // filter to the path/row
    .filterBounds(roi)
    // filter to the set cloud cover
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for selected year range
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    // filter for selected month range
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);
    
  // collect the LS7 imagery
  var col7 =  ee.ImageCollection("LANDSAT/LE07/C02/T1_L2") 
    .filterBounds(roi)
    // filter to the set cloud cover
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for selected year range
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    // filter for selected month range
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor/
    //.map(applyScaleFactors);

  // load landsat 8 imagery
  var col8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
    // filter imagery for path/row tile
    .filterBounds(roi)
    // filter for cloud cover using the user specified threshold
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for year
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    //filter the the months of interest
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);
    
  // load landsat 9 imagery
  var col9 = ee.ImageCollection("LANDSAT/LC09/C02/T1_L2") 
    // filter imagery for path/row tile
    .filterBounds(roi)
    // filter for cloud cover using the user specified threshold
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for year
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    //filter the the months of interest
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors); 
   
   
   
   
    //RENAME BANDS
   var OLI_images = ee.ImageCollection(col8.merge(col9))
                    .select(['SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7','ST_B10','QA_PIXEL'],
                    ['B1','B2','B3','B4','B5','B7','B6','pixel_qa']);

   //merge TM/ETM+ the collections 
   var TM_images = ee.ImageCollection(col7.merge(col5.merge(col4)))
                   .select(['SR_B1','SR_B2','SR_B3','SR_B4','SR_B5','SR_B7','ST_B6','QA_PIXEL'],
                   ['B1','B2','B3','B4','B5','B7','B6','pixel_qa']);
   
   // set spectral coefiecients
   var coefficients = {
      itcps: ee.Image.constant([0.0003, 0.0088, 0.0061, 0.0412, 0.0254, 0.0172])
             .multiply(10000),
       slopes: ee.Image.constant([0.8474, 0.8483, 0.9047, 0.8462, 0.8937, 0.9071])
    };
   
   
   // Transform TM/ETM+ iamges to OLI values
  function etmToOli(img) {
    return img.select(['B1','B2','B3','B4','B5','B7'])
            .multiply(coefficients.slopes)
            .add(coefficients.itcps)
            .round()
            .toShort()
            .addBands(img.select('B6', 'pixel_qa'));
          }
   
  TM_images = TM_images.map(etmToOli); 
   
  
  // Scaling factors  image
  function applyScaleFactors(image) {
      var opticalBands = image.select(['B1','B2','B3','B4','B5','B7']).multiply(0.0000275).add(-0.2);
      var thermalBand = image.select(['B6']).multiply(0.00341802).add(149.0);
      return image.addBands(opticalBands, null, true)
                  .addBands(thermalBand, null, true);
    }
  
   // Apply scaling factors to LS all bands
   var images = OLI_images.merge(TM_images).map(applyScaleFactors);
   
   //Fix float type error
   function fixFloat(image){
      var specCast = image.select(['B1','B2','B3','B4','B5','B7']).cast({'B1':'float',
                                                                         'B2': 'float',
                                                                         'B3': 'float',
                                                                         'B4': 'float',
                                                                         'B5': 'float',
                                                                         'B7': 'float'});
      return image.addBands(specCast, null, true);
    }
    
    images = images.map(fixFloat);

    if(cloud_mask === "none"){ images = images;}else{
      if(cloud_mask === "mild"){ images = images.map(function(img){
        // Bits 3 and 5 are cloud shadow and cloud, respectively.
        var cloudShadowBitMask = (1 << 3);
        var cloudsBitMask = (1 << 5);
        // Get the pixel QA band.
        var qa = img.select('pixel_qa');
        // Both flags should be set to zero, indicating clear conditions.
        var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                     .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
    
        // Define a kernel.
        var kernel = ee.Kernel.gaussian({radius: 10});
    
        // Perform an erosion followed by a dilation, display.
        var opened = mask.focal_min({kernel: kernel, iterations: 1});
  
        return img.updateMask(opened);              
      });
      }else{
        var masked_1 = images.map(function(img){
          // Bits 3 and 5 are cloud shadow and cloud, respectively.
          var cloudShadowBitMask = (1 << 3);
          var cloudsBitMask = (1 << 5);
          // Get the pixel QA band.
          var qa = img.select('pixel_qa');
          // Both flags should be set to zero, indicating clear conditions.
          var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                       .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
    
          // Define a kernel.
          var kernel = ee.Kernel.gaussian({radius: 10});
    
          // Perform an erosion followed by a dilation, display.
          var opened = mask.focal_min({kernel: kernel, iterations: 1});
  
          return img.updateMask(opened);              
        });            

        images = masked_1.map(function(image){
            
          var B1_wt = image.select('B1').gte(0.0284615);
          var B2_wt = image.select('B2').gte(0.0284615);
          var B3_wt = image.select('B3').gte(0.0284615);
          var B6_wt = image.select('B6').lte(0.0450904);
          var weight_mask = B2_wt.add(B3_wt).add(B2_wt).add(B6_wt).gte(4).eq(0);
      
          // Define a kernel.
          var kernel = ee.Kernel.gaussian({radius: 3});
    
          // Perform an erosion followed by a dilation, display.
          weight_mask = weight_mask
                   .focal_min({kernel: kernel, iterations: 1});

          return image.updateMask(weight_mask);
        });
      }}

    return images;    
  
};

exports.LSimagery_sans7 = function(roi, year1, year2, cloudCoverLimit, month_1, month_2, cloud_mask){

  // collect the LS4 imagery
  var col4 =  ee.ImageCollection("LANDSAT/LT04/C02/T1_L2")
    // filter to the path/row
    .filterBounds(roi) 
    // filter to the set cloud cover
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit) 
    // filter for selected year range
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    // filter for selected year range
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);
  
  // collect the LS5 imagery
  var col5 =  ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
    // filter to the path/row
    .filterBounds(roi)
    // filter to the set cloud cover
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for selected year range
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    // filter for selected month range
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);

  // load landsat 8 imagery
  var col8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2") 
    // filter imagery for path/row tile
    .filterBounds(roi)
    // filter for cloud cover using the user specified threshold
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for year
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    //filter the the months of interest
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors);
    
  // load landsat 9 imagery
  var col9 = ee.ImageCollection("LANDSAT/LC09/C02/T1_L2") 
    // filter imagery for path/row tile
    .filterBounds(roi)
    // filter for cloud cover using the user specified threshold
    .filterMetadata('CLOUD_COVER', 'not_greater_than', cloudCoverLimit)
    // filter for year
    .filterDate( year1 + '-01-01', year2 + '-12-31')
    //filter the the months of interest
    .filter(ee.Filter.calendarRange(month_1, month_2,'month'));
    //apply scaling factor
    //.map(applyScaleFactors); 
   
   
   
   
    //RENAME BANDS
   var OLI_images = ee.ImageCollection(col8.merge(col9))
                    .select(['SR_B2','SR_B3','SR_B4','SR_B5','SR_B6','SR_B7','ST_B10','QA_PIXEL'],
                    ['B1','B2','B3','B4','B5','B7','B6','pixel_qa']);

   //merge TM/ETM+ the collections 
   var TM_images = ee.ImageCollection(col5.merge(col4))
                   .select(['SR_B1','SR_B2','SR_B3','SR_B4','SR_B5','SR_B7','ST_B6','QA_PIXEL'],
                   ['B1','B2','B3','B4','B5','B7','B6','pixel_qa']);
   
   // set spectral coefiecients
   var coefficients = {
      itcps: ee.Image.constant([0.0003, 0.0088, 0.0061, 0.0412, 0.0254, 0.0172])
             .multiply(10000),
       slopes: ee.Image.constant([0.8474, 0.8483, 0.9047, 0.8462, 0.8937, 0.9071])
    };
   
   
   // Transform TM/ETM+ iamges to OLI values
  function etmToOli(img) {
    return img.select(['B1','B2','B3','B4','B5','B7'])
            .multiply(coefficients.slopes)
            .add(coefficients.itcps)
            .round()
            .toShort()
            .addBands(img.select('B6', 'pixel_qa'));
          }
   
  TM_images = TM_images.map(etmToOli); 
   
  
  // Scaling factors  image
  function applyScaleFactors(image) {
      var opticalBands = image.select(['B1','B2','B3','B4','B5','B7']).multiply(0.0000275).add(-0.2);
      var thermalBand = image.select(['B6']).multiply(0.00341802).add(149.0);
      return image.addBands(opticalBands, null, true)
                  .addBands(thermalBand, null, true);
    }
  
   // Apply scaling factors to LS all bands
   var images = OLI_images.merge(TM_images).map(applyScaleFactors);
   
   //Fix float type error
   function fixFloat(image){
      var specCast = image.select(['B1','B2','B3','B4','B5','B7']).cast({'B1':'float',
                                                                         'B2': 'float',
                                                                         'B3': 'float',
                                                                         'B4': 'float',
                                                                         'B5': 'float',
                                                                         'B7': 'float'});
      return image.addBands(specCast, null, true);
    }
    
    images = images.map(fixFloat);

    if(cloud_mask === "none"){ images = images;}else{
      if(cloud_mask === "mild"){ images = images.map(function(img){
        // Bits 3 and 5 are cloud shadow and cloud, respectively.
        var cloudShadowBitMask = (1 << 3);
        var cloudsBitMask = (1 << 5);
        // Get the pixel QA band.
        var qa = img.select('pixel_qa');
        // Both flags should be set to zero, indicating clear conditions.
        var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                     .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
    
        // Define a kernel.
        var kernel = ee.Kernel.gaussian({radius: 10});
    
        // Perform an erosion followed by a dilation, display.
        var opened = mask.focal_min({kernel: kernel, iterations: 1});
  
        return img.updateMask(opened);              
      });
      }else{
        var masked_1 = images.map(function(img){
          // Bits 3 and 5 are cloud shadow and cloud, respectively.
          var cloudShadowBitMask = (1 << 3);
          var cloudsBitMask = (1 << 5);
          // Get the pixel QA band.
          var qa = img.select('pixel_qa');
          // Both flags should be set to zero, indicating clear conditions.
          var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                       .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
    
          // Define a kernel.
          var kernel = ee.Kernel.gaussian({radius: 10});
    
          // Perform an erosion followed by a dilation, display.
          var opened = mask.focal_min({kernel: kernel, iterations: 1});
  
          return img.updateMask(opened);              
        });            

        images = masked_1.map(function(image){
            
          var B1_wt = image.select('B1').gte(0.0284615);
          var B2_wt = image.select('B2').gte(0.0284615);
          var B3_wt = image.select('B3').gte(0.0284615);
          var B6_wt = image.select('B6').lte(0.0450904);
          var weight_mask = B2_wt.add(B3_wt).add(B2_wt).add(B6_wt).gte(4).eq(0);
      
          // Define a kernel.
          var kernel = ee.Kernel.gaussian({radius: 3});
    
          // Perform an erosion followed by a dilation, display.
          weight_mask = weight_mask
                   .focal_min({kernel: kernel, iterations: 1});

          return image.updateMask(weight_mask);
        });
      }}

    return images;    
  
};
