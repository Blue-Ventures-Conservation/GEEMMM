/*

This is the MNDWI tidal condition module, which is part of the BVC GEM v1.2 library.
It is used calculate the MNDWI along the shoreline of input images and save the mean 
MNDWI value as an image metadata property.

Last update: 01-07-2022

*/



exports.doc = 'The MNDWI tidal condition module is to calculate mean MNDWI along the input image shoreline.' +
    '\n It uses a shoreline buffer to calculate the mean MNDWI for an image and add that value to the metadata.' +
    '\n It includes .' +
    '\n' +
    '\n cloud_mask(image):' +
    '\n   @param {ee.ImageCollection} image: landsate image which is to be maske'+
    '\n ' +
    '\n   The output is a maksed image';


// defining our function to filter shore reflectance
exports.shoreRefl = function(img, zone, roi, min_avg){
  if (min_avg === null) {
    min_avg = -1;
  }
  
  // import the PLASAT dataset and create an land mask
  var land_mask = ee.ImageCollection('JAXA/ALOS/PALSAR/YEARLY/SAR')
                  .filter(ee.Filter.date('2017-01-01', '2018-01-01'))
                  .mosaic().clip(roi)
                  .select('qa').eq(50);
                  
  var img_p1 = ee.ImageCollection(img).map(function(img){
    // create MNDWI Image
    var MNDWI = ee.Image(img).expression('(B2 - B5)/(B2 + B5)', {
      'B2': img.select('B2'),
      'B5': img.select('B5')
      }).rename(['MNDWI']);

    // use the MODIS land/water mask and cloud mask to mask out the land
    var masked_MNDWI = MNDWI.updateMask(land_mask);
  
    // reduce the image to the buffered shoreline, calculating a MNDWI
    var cum_val = masked_MNDWI.reduceRegion({ 
                    reducer: ee.Reducer.mean(),
                    geometry: zone,
                    scale: 100,
                    maxPixels: 1e15,
                    bestEffort: true,
                    tileScale: 16 
                    });

    // create single value to add to metatdata
    var cum_sum = ee.List(cum_val.values()).reduce(ee.Reducer.sum());
    // input that value into the image metadata as the property 'MNDWI'
    return img.set('MNDWI', ee.Number(cum_sum));
  });
  
  return img_p1.filter(ee.Filter.gte('MNDWI', min_avg));
};


exports.tide_bands = function(image){
  var img_out = ee.ImageCollection(image)
    // then add a band to each image called MNDWI (created from the shoreRefl function)
    .map(function(img){ img = ee.Image(img);
      return img.addBands(img.metadata("MNDWI"));
      })
    // create an inverse MNDWI to be used for high-tide conditions
    .map( function(img){ img = ee.Image(img);
      return img.set("inv_MNDWI", ee.Number(img.get("MNDWI")).multiply(-1)); 
      })
    // create an inverse MNDWI band for high-tide conditions
    .map(function(img){ img = ee.Image(img);
      return img.addBands(img.metadata("inv_MNDWI"));
      });
  
  return img_out;
};

