/*

This is the mangrove buffer module, which is part of the BVC GEM v1.2 library.
It is used to support decsions made around how to automatically select a shoreline
buffer. 

Last update: December 6, 2023

*/



exports.doc = 'The mangrove_buff module is a function to buffer the mangrove raster layer.' +
    '\n It is used to create a temporary layer for the user to view the outputs of various buffers. ' +
    '\n It includes .' +
    '\n' +
    '\n mang_buff(geom, mang):' +
    '\n   @param {ee.Geometry} geom: the coastline to be buffered' +
    '\n   @param {ee.Image} mange: the currently recognized mangrove extent' +
    '\n   @return {ee.Image} An image with the various buffered distances.' +
    '\n' +
    '\n graph:' +
    '\n   a graph of the various membership for each of the buffered distances.';


exports.mang_buff = function(geom, mang, coarse_roi, excludes){
  var clipGeom = function(cst, buf) {
    var buffed = cst.buffer(buf);
    for (var i = 0; i < excludes.length; i++) {
      buffed = buffed.difference(excludes[i]);
    }
    return buffed.intersection(coarse_roi);
  };
 
  // simplify the coastline geometry
  var coast = geom.simplify(1000);
  // create an image collection of various buffered mangroves, using the distance list
  var mangrove_buff = ee.Image(mang)
                      .addBands(mang.clip(clipGeom(coast, 1000)).rename(['01']))
                      .addBands(mang.clip(clipGeom(coast, 2500)).rename(['02']))
                      .addBands(mang.clip(clipGeom(coast, 5000)).rename(['05']))
                      .addBands(mang.clip(clipGeom(coast, 7500)).rename(['07']))
                      .addBands(mang.clip(clipGeom(coast, 10000)).rename(['10']))
                      .addBands(mang.clip(clipGeom(coast, 12500)).rename(['12']))
                      .addBands(mang.clip(clipGeom(coast, 15000)).rename(['15']))
                      .addBands(mang.clip(clipGeom(coast, 20000)).rename(['20']))
                      .addBands(mang.clip(clipGeom(coast, 25000)).rename(['25']))
                      .addBands(mang.clip(clipGeom(coast, 30000)).rename(['30']))
                      .addBands(mang.clip(clipGeom(coast, 35000)).rename(['35']));

  var bands = mangrove_buff.bandNames().slice(1,12);
  mangrove_buff = mangrove_buff.select(bands);

  return mangrove_buff;
};

exports.areaTable = function(img, geom, excludes){
  
  var bands = ee.Image.pixelArea().addBands(img).bandNames().slice(1,12);
  var proc_img = img.select(bands);

  geom = ee.FeatureCollection(geom).geometry();
  for (var i = 0; i < excludes.length; i++) {
    geom = geom.difference(excludes[i]);
  }
  var dict_sum = proc_img.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: geom, 
    scale: 30,
    maxPixels: 1e13,
    bestEffort: true
    });  
    

  return dict_sum;

};

exports.areaChart = function(img, geom, excludes){
  
  var bands = ee.Image.pixelArea().addBands(img).bandNames().slice(1,12);
  var proc_img = img.select(bands);

  geom = ee.FeatureCollection(geom).geometry();
  for (var i = 0; i < excludes.length; i++) {
    geom = geom.difference(excludes[i]);
  }
  var dict_sum = proc_img.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: geom, 
    scale: 30,
    maxPixels: 1e13,
    bestEffort: true
    });  
    
  var chart = ui.Chart.array.values({
      array: dict_sum.values(),
      axis: 0,
      xLabels: dict_sum.keys()
    }).setChartType('ColumnChart')
    .setOptions({
      title: 'Mangrove Area by Buffer',
      hAxis: {title: 'Shoreline Buffer (km)'},
      vAxis: {title: 'Area (square meters)'},
      legend: { position: "none" },
      lineWidth: 1,
      pointSize: 3
    });
    
  return chart;
};



exports.setROI = function(coast){
  
  var buff_in_func = function(){
    // the user has chosen to upload thier own mangrove extent raster
    var coastline_textbox = ui.Textbox({
    placeholder: 'Enter Coastline Buffer (KM)',
    onChange: function(buff_dist) {
      print('This is the entered coastline buffer: ' +
            '\n' + buff_dist + ' Km');
      var buff_in = ee.Number.parse(buff_dist).multiply(1000);
      return buff_in;
      }
    });
    print('Enter the desired distance to buffer the coastline');
    print(coastline_textbox);
    return buff_in;
  };
  
  var buff_in = buff_in_func();
  //var ROI = ee.Geometry(coast).buffer(buff_in);
  return buff_in;
};
  


